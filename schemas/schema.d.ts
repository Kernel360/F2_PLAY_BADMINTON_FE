/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/member/win": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 승리 기록 추가
         * @description 회원의 리그 기록에 승리를 추가합니다
         */
        post: operations["addWin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/member/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 액세스 토큰을 재발급합니다
         * @description 리프레시 토큰을 이용해서 액세스 토큰을 재발급합니다
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/member/lose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 패배 기록 추가
         * @description 회원의 리그 기록에 패배를 추가합니다
         */
        post: operations["addLose"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/member/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃을 합니다
         * @description 쿠키에서 JWT 토큰을 제거해 로그아웃을 합니다
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clubs/{clubId}/clubMembers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동호회 회원 전체 조회
         * @description 동호회에 가입한 회원들의 리스트를 조회합니다.
         */
        get: operations["getClubMembersInClub"];
        put?: never;
        /**
         * 동호회 가입 신청
         * @description 동호회에 가입을 신청합니다.
         */
        post: operations["joinClub"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/club": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 동호회 조회
         * @description 동호회를 조회합니다.
         */
        get: operations["readClub"];
        put?: never;
        /**
         * 동호회 추가
         * @description 동호회를 추가합니다.
         */
        post: operations["createClub"];
        /**
         * 동호회 삭제
         * @description 동호회를 삭제합니다.
         */
        delete: operations["deleteClub"];
        options?: never;
        head?: never;
        /**
         * 동호회 수정
         * @description 동호회를 수정합니다.
         */
        patch: operations["updateClub"];
        trace?: never;
    };
    "/v1/club/{clubId}/league": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 경기를 생성합니다.
         * @description 경기 생성하고를 데이터베이스에 저장합니다.
         */
        post: operations["createLeague"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/club/{clubId}/league/{leagueId}/participation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 경기 참여 신청
         * @description 동호회 회원이 경기 일정에 참여 신청을 합니다.
         */
        post: operations["participateInLeague"];
        /**
         * 경기 참여 신청 취소
         * @description 경기 참여 신청을 취소합니다.
         */
        delete: operations["cancelLeagueParticipation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/club/{clubId}/league/{leagueId}/match": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 대진표 생성
         * @description 대진표를 생성합니다.
         */
        post: operations["makeMatches"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/club/{clubId}/league/{leagueId}/match/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 대진표 대진별, 세트별, 점수 초기화 */
        post: operations["makeMatchesDetails"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/club/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 클럽 이미지 업로드
         * @description 이미지를 S3에 업로드하는 API 입니다.
         */
        post: operations["saveImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 회원 정보를 조회합니다
         * @description 회원의 마이페이지 접근 시 정보 조회 (동호회 정보 포함)
         */
        get: operations["getMemberInfo"];
        put?: never;
        post?: never;
        /**
         * 회원 탈퇴를 합니다
         * @description 멤버 필드의 isDeleted 를 true 로 변경합니다
         */
        delete: operations["deleteMember"];
        options?: never;
        head?: never;
        /**
         * 프로필 사진을 수정합니다
         * @description 프로필 사진을 수정합니다
         */
        patch: operations["update"];
        trace?: never;
    };
    "/v1/club/{clubId}/league/{leagueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 경기를 조회합니다.
         * @description 특정 경기를 경기 아이디를 통해 데이터베이스에서 조회합니다.
         */
        get: operations["leagueRead"];
        put?: never;
        post?: never;
        /**
         * 특정 경기를 삭제합니다.
         * @description 특정 경기를 데이터베이스 테이블에서 제거합니다.
         */
        delete: operations["deleteLeague"];
        options?: never;
        head?: never;
        /**
         * 경기의 세부 정보를 변경합니다.
         * @description 경기 제목, 경기 상태 등을 변경할 수 있습니다.
         */
        patch: operations["updateLeague"];
        trace?: never;
    };
    "/v1/clubs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 동호회 조회
         * @description 전체 동호회를 조회합니다.
         */
        get: operations["readAllClub"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ClubMemberJoinResponse: {
            /** Format: int64 */
            club_member_id?: number;
            role?: string;
        };
        ClubCreateRequest: {
            club_name: string;
            club_description: string;
            club_image?: string;
        };
        ClubCreateResponse: {
            club_name?: string;
            club_description?: string;
            club_image?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            modified_at?: string;
        };
        LeagueCreateRequest: {
            /**
             * @description 경기 이름
             * @example 배드민턴 경기
             */
            league_name?: string;
            /**
             * @description 경기 설명
             * @example 이 경기는 지역 예선 경기입니다.
             */
            description?: string;
            /**
             * @description 경기 장소
             * @example 성동구 서울숲 체육센터
             */
            league_location?: string;
            /**
             * @description 최소 티어
             * @example GOLD
             * @enum {string}
             */
            tier_limit?: "GOLD" | "SILVER" | "BRONZE";
            /**
             * @description 현재 경기 상태
             * @example OPEN
             * @enum {string}
             */
            league_status?: "OPEN" | "CLOSED";
            /**
             * @description 경기 방식
             * @example SINGLES
             * @enum {string}
             */
            match_type?: "SINGLES" | "DOUBLES";
            /**
             * Format: date-time
             * @description 경기 시작 날짜
             */
            league_at?: string;
            /**
             * Format: date-time
             * @description 모집 마감 날짜
             */
            closed_at?: string;
            /**
             * Format: int32
             * @description 참가 인원
             * @example 16
             */
            player_count?: number;
            /**
             * @description 매칭 조건
             * @example TIER
             */
            matching_requirement?: string;
        };
        LeagueCreateResponse: {
            /**
             * @description 경기 이름
             * @example 배드민턴 경기
             */
            league_name?: string;
            /**
             * @description 경기 설명
             * @example 이 경기는 지역 예선 경기입니다.
             */
            description?: string;
            /**
             * @description 최소 티어
             * @example GOLD
             * @enum {string}
             */
            tier_limit?: "GOLD" | "SILVER" | "BRONZE";
            /**
             * @description 현재 경기 상태
             * @example OPEN
             * @enum {string}
             */
            status?: "OPEN" | "CLOSED";
            /**
             * @description 경기 방식
             * @example SINGLE
             * @enum {string}
             */
            match_type?: "SINGLES" | "DOUBLES";
            /**
             * Format: date-time
             * @description 경기 시작 날짜
             */
            league_at?: string;
            /**
             * Format: date-time
             * @description 모집 마감 날짜
             */
            closed_at?: string;
            /**
             * Format: int32
             * @description 참가 인원
             * @example 16
             */
            player_count?: number;
            /**
             * Format: date-time
             * @description 생성 일자
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description 수정 일자
             */
            modified_at?: string;
            /**
             * @description 매칭 조건
             * @example TIER
             */
            matching_requirement?: string;
        };
        LeagueParticipantResponse: {
            /** Format: int64 */
            league_id?: number;
            /** Format: int64 */
            club_member_id?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            modified_at?: string;
        };
        DoublesMatchResponse: {
            team1?: components["schemas"]["TeamResponse"];
            team2?: components["schemas"]["TeamResponse"];
        };
        MatchResponse: {
            /** Format: int64 */
            match_id?: number;
            /** Format: int64 */
            league_id?: number;
            /** @enum {string} */
            match_type?: "SINGLES" | "DOUBLES";
            singles_match?: components["schemas"]["SinglesMatchResponse"];
            doubles_match?: components["schemas"]["DoublesMatchResponse"];
        };
        SinglesMatchResponse: {
            participant1_name?: string;
            participant1_image?: string;
            participant2_name?: string;
            participant2_image?: string;
        };
        TeamResponse: {
            participant1_name?: string;
            participant1_image?: string;
            participant2_name?: string;
            participant2_image?: string;
        };
        DoublesSetResponse: {
            /** Format: int32 */
            set_index?: number;
            /** Format: int32 */
            score1?: number;
            /** Format: int32 */
            score2?: number;
        };
        MatchDetailsResponse: {
            /** Format: int64 */
            match_id?: number;
            /** Format: int64 */
            league_id?: number;
            /** @enum {string} */
            match_type?: "SINGLES" | "DOUBLES";
            singles_match?: components["schemas"]["SinglesMatchResponse"];
            doubles_match?: components["schemas"]["DoublesMatchResponse"];
            singles_sets?: components["schemas"]["SinglesSetResponse"][];
            doubles_sets?: components["schemas"]["DoublesSetResponse"][];
        };
        SinglesSetResponse: {
            /** Format: int32 */
            set_index?: number;
            /** Format: int32 */
            score1?: number;
            /** Format: int32 */
            score2?: number;
        };
        ClubImageUploadRequest: {
            /** Format: binary */
            multipartFile?: string;
        };
        /** @description 회원 수정 DTO */
        MemberUpdateRequest: {
            /**
             * @description 프로필 사진
             * @example http://img1.kakaocdn.net/thumb/R640x640.q70/?fname=http://t1.kakaocdn.net/account_images/default_profile.jpeg
             */
            profile_image?: string;
        };
        /** @description 회원 수정 responseDto */
        MemberUpdateResponse: {
            /**
             * @description 회원 역할
             * @example AUTHORIZATION_USER
             */
            authorization?: string;
            /**
             * @description 회원 이름
             * @example 이선우
             */
            name?: string;
            /**
             * @description oAuth 로그인 이메일
             * @example qosle@naver.com
             */
            email?: string;
            /**
             * @description oAuth 제공 ID
             * @example 1070449979547641023123
             */
            provider_id?: string;
            /**
             * @description oAuth 제공 이미지
             * @example 1070449979547641023123
             */
            profile_image?: string;
        };
        ClubUpdateRequest: {
            club_name: string;
            club_description: string;
            club_image?: string;
        };
        ClubUpdateResponse: {
            club_name?: string;
            club_description?: string;
            club_image?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            modified_at?: string;
        };
        LeagueUpdateRequest: {
            /**
             * @description 경기 이름
             * @example 배드민턴 경기
             */
            league_name?: string;
            /**
             * @description 경기 설명
             * @example 이 경기는 지역 예선 경기입니다.
             */
            description?: string;
            /**
             * @description 경기 장소
             * @example 성동구 서울숲 체육센터
             */
            league_location?: string;
            /**
             * @description 최소 티어
             * @example GOLD
             * @enum {string}
             */
            tier_limit?: "GOLD" | "SILVER" | "BRONZE";
            /**
             * @description 현재 경기 상태
             * @example OPEN
             * @enum {string}
             */
            league_status?: "OPEN" | "CLOSED";
            /**
             * @description 경기 방식
             * @example SINGLE
             * @enum {string}
             */
            match_type?: "SINGLES" | "DOUBLES";
            /**
             * Format: date-time
             * @description 경기 시작 날짜
             */
            league_at?: string;
            /**
             * Format: date-time
             * @description 모집 마감 날짜
             */
            closed_at?: string;
            /**
             * Format: int32
             * @description 참가 인원
             * @example 16
             */
            player_count?: number;
            /**
             * @description 매칭 조건
             * @example TIER
             */
            matching_requirement?: string;
        };
        LeagueStatusUpdateResponse: {
            /**
             * Format: int64
             * @description 특정 경기 아이디
             */
            league_id?: number;
            /**
             * @description 경기 이름
             * @example 배드민턴 경기
             */
            league_name?: string;
            /**
             * @description 경기 설명
             * @example 이 경기는 지역 예선 경기입니다.
             */
            description?: string;
            /**
             * @description 최소 티어
             * @example GOLD
             * @enum {string}
             */
            tier_limit?: "GOLD" | "SILVER" | "BRONZE";
            /**
             * @description 현재 경기 상태
             * @example OPEN
             * @enum {string}
             */
            league_status?: "OPEN" | "CLOSED";
            /**
             * @description 경기 방식
             * @example SINGLE
             * @enum {string}
             */
            match_type?: "SINGLES" | "DOUBLES";
            /**
             * Format: date-time
             * @description 경기 시작 날짜
             */
            league_at?: string;
            /**
             * Format: date-time
             * @description 모집 마감 날짜
             */
            closed_at?: string;
            /**
             * Format: int32
             * @description 참가 인원
             * @example 16
             */
            player_count?: number;
            /**
             * Format: date-time
             * @description 수정 일자
             */
            modified_at?: string;
            /**
             * @description 매칭 조건
             * @example TIER
             */
            matching_requirement?: string;
        };
        MemberDetailResponse: {
            name?: string;
            /** Format: int64 */
            member_id?: number;
            email?: string;
            profile_image?: string;
        };
        ClubsReadResponse: {
            /** Format: int64 */
            club_id?: number;
            club_name?: string;
            club_description?: string;
            club_image?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            modified_at?: string;
            tier_counts?: {
                [key: string]: number;
            };
        };
        ClubMemberResponse: {
            image?: string;
            name?: string;
            league_record_info_response?: components["schemas"]["LeagueRecordInfoResponse"];
        };
        LeagueRecordInfoResponse: {
            /** Format: int32 */
            win_count?: number;
            /** Format: int32 */
            lose_count?: number;
            /** Format: int32 */
            draw_count?: number;
            /** Format: int32 */
            match_count?: number;
            /** @enum {string} */
            tier?: "GOLD" | "SILVER" | "BRONZE";
        };
        ClubReadResponse: {
            club_name?: string;
            club_description?: string;
            club_image?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            modified_at?: string;
        };
        LeagueReadResponse: {
            /**
             * Format: int64
             * @description 경기 아이디
             */
            league_id?: number;
            /**
             * @description 경기 이름
             * @example 배드민턴 경기
             */
            league_name?: string;
            /**
             * @description 경기 설명
             * @example 이 경기는 지역 예선 경기입니다.
             */
            description?: string;
            /**
             * @description 최소 티어
             * @example GOLD
             * @enum {string}
             */
            tier_limit?: "GOLD" | "SILVER" | "BRONZE";
            /**
             * @description 현재 경기 상태
             * @example OPEN
             * @enum {string}
             */
            status?: "OPEN" | "CLOSED";
            /**
             * @description 경기 방식
             * @example SINGLE
             * @enum {string}
             */
            match_type?: "SINGLES" | "DOUBLES";
            /**
             * Format: date-time
             * @description 경기 시작 날짜
             */
            league_at?: string;
            /**
             * Format: date-time
             * @description 모집 마감 날짜
             */
            closed_at?: string;
            /**
             * Format: int32
             * @description 참가 인원
             * @example 16
             */
            player_count?: number;
            /**
             * Format: date-time
             * @description 생성 일자
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description 수정 일자
             */
            modified_at?: string;
            /**
             * @description 매칭 조건
             * @example RANDOM
             */
            matching_requirement?: string;
        };
        /** @description 회원 삭제 responseDto */
        MemberDeleteResponse: {
            /**
             * Format: int64
             * @description 멤버 id
             * @example 1
             */
            member_id?: number;
            /**
             * @description 삭제 여부
             * @example true
             */
            is_deleted?: boolean;
        };
        ClubDeleteResponse: {
            /** Format: int64 */
            club_id?: number;
            is_club_deleted?: boolean;
        };
        LeagueParticipationCancelResponse: {
            /** Format: int64 */
            league_id?: number;
            /** Format: int64 */
            club_member_id?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            deleted_at?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    addWin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    addLose: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getClubMembersInClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubMemberResponse"][];
                };
            };
        };
    };
    joinClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 동호회 ID
                 * @example 1
                 */
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubMemberJoinResponse"];
                };
            };
        };
    };
    readClub: {
        parameters: {
            query: {
                clubId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubReadResponse"];
                };
            };
        };
    };
    createClub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClubCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubCreateResponse"];
                };
            };
        };
    };
    deleteClub: {
        parameters: {
            query: {
                clubId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubDeleteResponse"];
                };
            };
        };
    };
    updateClub: {
        parameters: {
            query: {
                clubId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClubUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubUpdateResponse"];
                };
            };
        };
    };
    createLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeagueCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeagueCreateResponse"];
                };
            };
        };
    };
    participateInLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeagueParticipantResponse"];
                };
            };
        };
    };
    cancelLeagueParticipation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeagueParticipationCancelResponse"];
                };
            };
        };
    };
    makeMatches: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MatchResponse"][];
                };
            };
        };
    };
    makeMatchesDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MatchDetailsResponse"][];
                };
            };
        };
    };
    saveImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ClubImageUploadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getMemberInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberDetailResponse"];
                };
            };
        };
    };
    deleteMember: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberDeleteResponse"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberUpdateResponse"];
                };
            };
        };
    };
    leagueRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeagueReadResponse"];
                };
            };
        };
    };
    deleteLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": "CONTINUE" | "SWITCHING_PROTOCOLS" | "PROCESSING" | "EARLY_HINTS" | "CHECKPOINT" | "OK" | "CREATED" | "ACCEPTED" | "NON_AUTHORITATIVE_INFORMATION" | "NO_CONTENT" | "RESET_CONTENT" | "PARTIAL_CONTENT" | "MULTI_STATUS" | "ALREADY_REPORTED" | "IM_USED" | "MULTIPLE_CHOICES" | "MOVED_PERMANENTLY" | "FOUND" | "MOVED_TEMPORARILY" | "SEE_OTHER" | "NOT_MODIFIED" | "USE_PROXY" | "TEMPORARY_REDIRECT" | "PERMANENT_REDIRECT" | "BAD_REQUEST" | "UNAUTHORIZED" | "PAYMENT_REQUIRED" | "FORBIDDEN" | "NOT_FOUND" | "METHOD_NOT_ALLOWED" | "NOT_ACCEPTABLE" | "PROXY_AUTHENTICATION_REQUIRED" | "REQUEST_TIMEOUT" | "CONFLICT" | "GONE" | "LENGTH_REQUIRED" | "PRECONDITION_FAILED" | "PAYLOAD_TOO_LARGE" | "REQUEST_ENTITY_TOO_LARGE" | "URI_TOO_LONG" | "REQUEST_URI_TOO_LONG" | "UNSUPPORTED_MEDIA_TYPE" | "REQUESTED_RANGE_NOT_SATISFIABLE" | "EXPECTATION_FAILED" | "I_AM_A_TEAPOT" | "INSUFFICIENT_SPACE_ON_RESOURCE" | "METHOD_FAILURE" | "DESTINATION_LOCKED" | "UNPROCESSABLE_ENTITY" | "LOCKED" | "FAILED_DEPENDENCY" | "TOO_EARLY" | "UPGRADE_REQUIRED" | "PRECONDITION_REQUIRED" | "TOO_MANY_REQUESTS" | "REQUEST_HEADER_FIELDS_TOO_LARGE" | "UNAVAILABLE_FOR_LEGAL_REASONS" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "BAD_GATEWAY" | "SERVICE_UNAVAILABLE" | "GATEWAY_TIMEOUT" | "HTTP_VERSION_NOT_SUPPORTED" | "VARIANT_ALSO_NEGOTIATES" | "INSUFFICIENT_STORAGE" | "LOOP_DETECTED" | "BANDWIDTH_LIMIT_EXCEEDED" | "NOT_EXTENDED" | "NETWORK_AUTHENTICATION_REQUIRED";
                };
            };
        };
    };
    updateLeague: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                leagueId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeagueUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LeagueStatusUpdateResponse"];
                };
            };
        };
    };
    readAllClub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ClubsReadResponse"][];
                };
            };
        };
    };
}
